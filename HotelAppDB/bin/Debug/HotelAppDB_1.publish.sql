/*
Deployment script for HotelAppDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HotelAppDB"
:setvar DefaultFilePrefix "HotelAppDB"
:setvar DefaultDataPath "C:\Users\joris\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\joris\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

if not exists (select 1 from dbo.RoomTypes) --1a. Controleren of de 'RoomTypes' tabel al records bevat, 
                                            --    want in dat geval willen we geen starter data eroverheen schrijven.
                                            --    'select 1' -> We hoeven helemaal geen specifieke kolommen op te halen, maar zeggen hier dat als er een record is geef ons dan het getal 1 terug, 
                                            --                  zodoende weten we of er wel/niet records in de tabel zitten.
                                            --    Maar als er dus geen records in de tabel zitten, dan wordt er 'not exists' teruggegeven,
                                            --    en wordt vervolgens onze code tussen 'begin' en 'end' gerunned.
begin
insert into dbo.RoomTypes(Title, Description, Price)    -- 1b. SQL-query die starter data insert in de 'RoomTypes' tabel.
values('King Size Bed', 'A room with a king-size bed and a window.', 100),
('Two Queen Size Beds', 'A room with two queen-sized beds and a window.', 115),
('Executive Suite', 'Two rooms, each with a king-size bed and a window.', 205)
end

-- 1c. Dezelfde check & inserten van starter data voor de 'Rooms' tabel.
--     Maar hoe weten we wat de value voor 'RoomTypeId' is? Dat is niet per definitie 1,2,3.
--     Daarom declaren we eerst variabelen waarin we de value voor 'RoomTypeId' stoppen 
--     mbv een SQL-query die het 'Id' van de records in de 'RoomTypes' tabel opvraagt.
--     Vervolgens kunnen we dan met een parameterized query de starter data inserten in de 'Rooms' tabel.
if not exists (select 1 from dbo.Rooms)
begin
-- 1d. Declaren van variabelen
declare @roomId1 int;
declare @roomId2 int;
declare @roomId3 int;

-- 1e. De value van 'Id' voor de drie verschillende records in de 'RoomTypes' tabel opvragen en in onze variabelen stoppen.
select @roomId1 = Id from dbo.RoomTypes where Title = 'King Size Bed';
select @roomId2 = Id from dbo.RoomTypes where Title = 'Two Queen Size Beds';
select @roomId3 = Id from dbo.RoomTypes where Title = 'Executive Suite';

-- 1f. Inserten van de starter data in de 'Rooms' tabel met een parameterized query.
insert into dbo.Rooms(RoomNumber, RoomTypeId)
values('101', @roomId1),
('102', @roomId1),          -- 1g. Kan natuurlijk prima dat meerdere kamers van dezelfde 'RoomType' zijn.
('103', @roomId1),
('201', @roomId2),
('202', @roomId2),
('301', @roomId3);
end

-- 1h. Nu dit script klaar is gaan we verder met de setup van de db, zie 'Explanation'.
GO

GO
PRINT N'Update complete.';


GO
